const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

const gridSize = 20;
const tileCountX = canvas.width / gridSize;
const tileCountY = canvas.height / gridSize;

class Snake {
    constructor(x, y, color, upKey, downKey, leftKey, rightKey) {
        this.x = x;
        this.y = y;
        this.xSpeed = 1;
        this.ySpeed = 0;
        this.total = 0;
        this.tail = [];
        this.color = color;
        this.controls = { upKey, downKey, leftKey, rightKey };
    }

    draw() {
        ctx.fillStyle = this.color;
        for (let segment of this.tail) {
            ctx.fillRect(segment.x, segment.y, gridSize, gridSize);
        }
        ctx.fillRect(this.x, this.y, gridSize, gridSize);
    }

    update() {
        if (this.total > 0) {
            this.tail.pop();
            this.tail.unshift({ x: this.x, y: this.y });
        }
        this.x += this.xSpeed * gridSize;
        this.y += this.ySpeed * gridSize;
        if (this.x >= canvas.width) this.x = 0;
        if (this.y >= canvas.height) this.y = 0;
        if (this.x < 0) this.x = canvas.width - gridSize;
        if (this.y < 0) this.y = canvas.height - gridSize;
    }

    changeDirection(keyCode) {
        if (keyCode === this.controls.upKey && this.ySpeed === 0) {
            this.xSpeed = 0;
            this.ySpeed = -1;
        } else if (keyCode === this.controls.downKey && this.ySpeed === 0) {
            this.xSpeed = 0;
            this.ySpeed = 1;
        } else if (keyCode === this.controls.leftKey && this.xSpeed === 0) {
            this.xSpeed = -1;
            this.ySpeed = 0;
        } else if (keyCode === this.controls.rightKey && this.xSpeed === 0) {
            this.xSpeed = 1;
            this.ySpeed = 0;
        }
    }

    eatDot(dot) {
        return this.x === dot.x && this.y === dot.y;
    }
}

class Dot {
    constructor() {
        this.x = Math.floor(Math.random() * tileCountX) * gridSize;
        this.y = Math.floor(Math.random() * tileCountY) * gridSize;
    }

    draw() {
        ctx.fillStyle = "red";
        ctx.fillRect(this.x, this.y, gridSize, gridSize);
    }
}

const snake1 = new Snake(gridSize * 2, gridSize * 2, "lime", 87, 83, 65, 68);
const snake2 = new Snake(gridSize * 4, gridSize * 4, "blue", 38, 40, 37, 39);
let dot = new Dot();

function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    snake1.update();
    snake2.update();

    snake1.draw();
    snake2.draw();

    dot.draw();

    if (snake1.eatDot(dot)) {
        snake1.total++;
        dot = new Dot();
    }

    if (snake2.eatDot(dot)) {
        snake2.total++;
        dot = new Dot();
    }

    requestAnimationFrame(gameLoop);
}

window.addEventListener("keydown", (event) => {
    snake1.changeDirection(event.keyCode);
    snake2.changeDirection(event.keyCode);
});

gameLoop();
